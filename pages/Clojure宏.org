* Clojure程序的不同时期都有哪些？ #card #clojure
:PROPERTIES:
:card-last-interval: 5.59
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-04-12T15:31:43.228Z
:card-last-reviewed: 2022-04-07T01:31:43.228Z
:card-last-score: 5
:END:
** 读入期、 {{cloze 宏展开期}}、编译期、执行期
* macroexpand-1, macroexpand和clojure.walk/macroexpand-all的区别是什么？ #card #clojure
:PROPERTIES:
:card-last-interval: 5.59
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-04-12T15:28:27.453Z
:card-last-reviewed: 2022-04-07T01:28:27.453Z
:card-last-score: 5
:END:
** macroexpand-1 只展开一层，展开后可能还有其他宏的调用，对递归调用自己的宏不展开
** macroexpand 一直展开，直到没有其他宏调用，对递归调用自己的宏不展开
** clojure.walk/macroexpand-all 一直展开，直到没有其他宏调用，对递归调用自己的宏也一直展开
* Clojure宏体中常见的~'foo是什么意思？
** 在宏的syntax-quote中，Clojure会尝试resolve一个symbol，添加它的namespace，但是当我们需要一个local symbol的时候，~'会避免这种解析
** #+BEGIN_SRC clojure
`(println sym)
;=> (clojure.core/println user/sym)

`(println ~'~sym)
;=> (clojure.core/println sym)
#+END_SRC
* 宏的一个重要用途是管理资源，进行自动的资源关闭，例如with-open
** #+BEGIN_SRC clojure
(clojure.walk/macroexpand-all
 '(with-open [page stream]
    (println (.readLine page))))

;; => (let*
;;     [page stream]
;;     (try (do (println (. page readLine))) (finally (. page clojure.core/close))))

#+END_SRC