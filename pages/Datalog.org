* [[Datomic]] is a database of atomic facts, named [[file:./datom.org][Datom]]
* What is a query? #card #Datalog
:PROPERTIES:
:card-last-interval: 104.74
:card-repeats: 5
:card-ease-factor: 3
:card-next-schedule: 2022-12-07T17:37:33.097Z
:card-last-reviewed: 2022-08-25T00:37:33.097Z
:card-last-score: 5
:END:
** A query is a vector, staring with keyword :find
** and then a one or more pattern variables, which are symbols starting with ?, like ?e, ?title,
** and then a :while clause, to match [[Datom]] with data patterns
** example:
*** #+BEGIN_SRC edn
[:find ?e
 :where
 [?e :person/name "Ridley Scott"]]
#+END_SRC
* What are data patterns? #card #Datalog
:PROPERTIES:
:id: 62a04fbf-07b3-44f5-ab1f-2bd75f9d92a0
:card-last-interval: 117.49
:card-repeats: 5
:card-ease-factor: 2.76
:card-next-schedule: 2022-12-20T11:37:51.356Z
:card-last-reviewed: 2022-08-25T00:37:51.357Z
:card-last-score: 3
:END:
** A data pattern is a datom with some parts replaced with pattern variables.
** The symbol _ can be used as a wildcard for the parts of the data pattern that you wish to ignore.
** Data pattern的结构是 [<database> <entity-id> <attribute> <value> <transaction-id>]，通常<database>可以忽略
* Datalog查询中 in 子句的作用是什么？ #card #Datalog
:PROPERTIES:
:card-last-interval: 115.56
:card-repeats: 5
:card-ease-factor: 3
:card-next-schedule: 2022-12-27T14:16:31.307Z
:card-last-reviewed: 2022-09-03T01:16:31.308Z
:card-last-score: 5
:END:
** 用来为查询提供输入参数 input parameter
* Datalog查询中的输入参数如何匹配一个collection? #card #Datalog
:PROPERTIES:
:card-last-interval: -1
:card-repeats: 1
:card-ease-factor: 3.3
:card-next-schedule: 2022-11-02T16:00:00.000Z
:card-last-reviewed: 2022-11-01T23:09:02.535Z
:card-last-score: 1
:END:
** 下面的匹配会依次匹配?title，形成一个逻辑*或*的查询
** #+BEGIN_SRC clojure
[:find ?title
 :in $ [?director ...]
 :where
 [?p :person/name ?director]
 [?m :movie/director ?p]
 [?m :movie/title ?title]]

; input is ["James Cameron" "Ridley Scott"]
#+END_SRC
* Datalog查询的输入参数如何匹配一个tuple? #card #Datalog
:PROPERTIES:
:card-last-score: 5
:card-repeats: 5
:card-next-schedule: 2023-04-05T11:40:21.245Z
:card-last-interval: 199.42
:card-ease-factor: 3.1
:card-last-reviewed: 2022-09-18T01:40:21.245Z
:END:
** #+BEGIN_SRC clojure
[:find ?title
 :in $ [?director ?actor]
 :where
 [?d :person/name ?director]
 [?a :person/name ?actor]
 [?m :movie/director ?d]
 [?m :movie/cast ?a]
 [?m :movie/title ?title]]

; input is ["James Cameron" "Arnold Schwarzenegger"]
#+END_SRC
* Datalog查询的输入参数如何匹配一个relation #card #Datalog
:PROPERTIES:
:card-last-interval: 115.56
:card-repeats: 5
:card-ease-factor: 3
:card-next-schedule: 2022-12-31T19:49:24.802Z
:card-last-reviewed: 2022-09-07T06:49:24.803Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
[:find ?title ?box-office
 :in $ ?director [[?title ?box-office]]
 :where
 [?p :person/name ?director]
 [?m :movie/director ?p]
 [?m :movie/title ?title]]

; input is
[
 ...
 ["Die Hard" 140700000]
 ["Alien" 104931801]
 ["Lethal Weapon" 120207127]
 ["Commando" 57491000]
 ...
]
#+END_SRC
* Datalog查询如何返回一个vector而不是set of vectors? #card #Datalog
:PROPERTIES:
:card-last-interval: 50.34
:card-repeats: 4
:card-ease-factor: 3.2
:card-next-schedule: 2022-11-17T08:20:09.913Z
:card-last-reviewed: 2022-09-28T00:20:09.914Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
(d/q
  ;; query
  '[:find [?prefix ...]
    :in [?word ...]
    :where [(subs ?word 0 5) ?prefix]]
  ;; inputs
  ["hello" "antidisestablishmentarianism"])

;=> ["hello" "antid"]
#+END_SRC