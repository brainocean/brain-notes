* 算法复杂度分析的常用方法 #card #DSA
:PROPERTIES:
:card-last-interval: -1
:card-repeats: 1
:card-ease-factor: 2.7
:card-next-schedule: 2022-08-31T16:00:00.000Z
:card-last-reviewed: 2022-08-31T01:40:50.895Z
:card-last-score: 1
:END:
** 迭代/循环算法——级数求和
** 递归
*** 递归跟踪
*** 递推方程
** 猜测 + 验证
* 级数求和
** 算术级数:  {{cloze 与末项平方同阶}} #card #DSA
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-09-04T05:08:37.456Z
:card-last-reviewed: 2022-08-24T01:08:37.456Z
:card-last-score: 5
:END:
*** $$T(n) = 1+2+3+ \dots + n = n(n+1)/2 = O(n^2)$$
** 幂方级数： {{cloze 比幂次高出一阶}} #card #DSA
:PROPERTIES:
:card-last-interval: -1
:card-repeats: 1
:card-ease-factor: 2.7
:card-next-schedule: 2022-08-31T16:00:00.000Z
:card-last-reviewed: 2022-08-31T01:52:54.399Z
:card-last-score: 1
:END:
*** $$ T_2(n) = 1^2 + 2^2 + \dots + n^2 = n(n+1)(2n+1)/6 = O(n^3)$$
*** $$T_3(n) = 1^3 + 2^3 + \dots + n^3 = n^2(n+1)^2/4 = O(n^4)$$
*** $$T_4(n) = 1^4+2^4+ \dots + 7^4=n(n+1)(2n+1)(3n^2+3n-1)/30 = O(n^5)$$
*** 推而广之，$T_d(n)=O(n^{d+1})$
** 几何级数： {{cloze 与末项同阶}} #card #DSA
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-09-11T05:48:17.294Z
:card-last-reviewed: 2022-08-31T01:48:17.294Z
:card-last-score: 5
:END:
*** $$T_a(n)=a^0 + a^1 + a^2 + \dots + a^n = (a^{n+1}-1)/(a-1) = O(a^n)$$
** 收敛级数： {{cloze O(1)}} #card #DSA
:PROPERTIES:
:card-last-interval: 10.24
:card-repeats: 3
:card-ease-factor: 2.56
:card-next-schedule: 2022-09-10T06:50:39.255Z
:card-last-reviewed: 2022-08-31T01:50:39.255Z
:card-last-score: 5
:END:
*** $$1/1/2 + 1/2/3 + 1/3/4 + \dots + 1/(n-1)/n = 1-1/n = O(1)$$
** 调和级数: #card #DSA
:PROPERTIES:
:card-last-interval: 10.24
:card-repeats: 3
:card-ease-factor: 2.56
:card-next-schedule: 2022-09-10T06:50:45.450Z
:card-last-reviewed: 2022-08-31T01:50:45.450Z
:card-last-score: 5
:END:
*** $$h(n) = 1+1/2+1/3+ \dots + 1/n = \Theta(logn)$$
** 对数级数 #card #DSA
:PROPERTIES:
:card-last-interval: -1
:card-repeats: 1
:card-ease-factor: 2.7
:card-next-schedule: 2022-08-31T16:00:00.000Z
:card-last-reviewed: 2022-08-31T01:48:29.734Z
:card-last-score: 1
:END:
*** $$log1 + log2 + \dots + logn = log(n!) = \Theta(nlogn)$$
* 常见循环算法复杂度
** n*n循环复杂度 #card #DSA
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-09-04T05:08:00.974Z
:card-last-reviewed: 2022-08-24T01:08:00.974Z
:card-last-score: 5
:END:
*** #+BEGIN_SRC c++
for(int i=0; i<n; i++)
  for(int j=0; j<n; j++)
    O1Operation(i,j);
#+END_SRC
*** 算术级数 复杂度$\sum_{i=0}^{n-1}n =n*n = O(n^2)$
*** [[../assets/n-square_1660619697242_0.png]]
** n*(n-1)/2循环复杂度  #card #DSA
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-09-04T05:08:04.276Z
:card-last-reviewed: 2022-08-24T01:08:04.276Z
:card-last-score: 5
:END:
*** #+BEGIN_SRC c++
for(int i=0; i<n; i++)
  for(int j=0; j<i; j++)
    O1Operation(i,j);
#+END_SRC
*** 算术级数 复杂度$\sum_{i=0}^{n-1}i = n(n-1)/2 = O(n^2)$
*** [[../assets/n-square-2_1660619719466_0.png]]
** 步长加倍循环复杂度  #card #DSA
:PROPERTIES:
:card-last-interval: 152.82
:card-repeats: 3
:card-ease-factor: 2.7
:card-next-schedule: 2023-01-22T20:09:25.621Z
:card-last-reviewed: 2022-08-23T01:09:25.675Z
:card-last-score: 5
:END:
*** #+BEGIN_SRC c++
for(int i=0; i<n; i<<1)
  for(int j=0; j<i; j++)
    O1Operation(i,j);
#+END_SRC
*** 几何级数 $1+2+4+ \dots + 2^{\lfloor \log_2(n-1) \rfloor} = 2^{\lceil \log_2n \rceil}-1 = O(n)$
*** [[../assets/double-step_1660619731639_0.png]]
* 递归算法的复杂度
** 递归跟踪——罗列所有递归实例，单个递归实例的复杂度(包括递归函数调用的O(1))，累积起来即为算法的复杂度
** 减而治之和分而治之的比较 #card #DSA
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-09-04T05:08:50.546Z
:card-last-reviewed: 2022-08-24T01:08:50.547Z
:card-last-score: 5
:END:
*** 都是分为两部分，再合并结果
*** 减而治之是分成一个平凡、一个规模缩减，例如线性递归
*** 分而治之分为规模大体相当的子问题，例如二分递归
** 递推式
*** 通过解递推方程，来推断T(n)的复杂度
*** 一般性求解得出[[Master Theorem]]
*** 常见递推式和复杂度的解 #card #DSA
:PROPERTIES:
:card-last-interval: 4
:card-repeats: 2
:card-ease-factor: 2.22
:card-next-schedule: 2022-09-04T01:42:49.882Z
:card-last-reviewed: 2022-08-31T01:42:49.883Z
:card-last-score: 3
:END:
**** | 递推式 | 解 | 实例 |
| $T(n)=T(n-1)+1$ | $O(n)$ | 向量求和的线性递归版 |
| $T(n)=T(n-1)+n$ | $O(n^2)$ | 列表起泡排序之线性递归版 |
| $T(n)=2 \times T(n-1)+1$ | $O(2^n)$ | Hanoi塔、Fibonacci数 |
| $T(n)=2 \times T(n-1)+n$ | $O(2^n)$ |  |
| $T(n)=T(n/2)+1$ | $O( \log n)$ | 向量的二分查找 |
| $T(n)=T(n/2)+n$ | $O(n)$ | 列表的二分查找 |
| $T(n)=2 \times T(n/2)+1$ | $O(n)$ | 向量求和之二分递归版 |
| $T(n)=2 \times T(n/2)+n$ | $O(n \log n)$ | 归并排序 |