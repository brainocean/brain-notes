* Atom的适用场景是什么？ #card #clojure
:PROPERTIES:
:card-last-interval: 4.14
:card-repeats: 2
:card-ease-factor: 2.7
:card-next-schedule: 2022-05-03T05:16:33.982Z
:card-last-reviewed: 2022-04-29T02:16:33.982Z
:card-last-score: 5
:END:
** 对单一的孤立的数据的不需要协调的同步访问，和Ref相比更加轻量级
* 如何创建一个Atom并获取它的值？ #card #Clojure
:PROPERTIES:
:card-last-interval: 4.14
:card-repeats: 2
:card-ease-factor: 2.7
:card-next-schedule: 2022-05-03T05:17:25.252Z
:card-last-reviewed: 2022-04-29T02:17:25.253Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
(def current-track (atom "Venus, the Bringer of Peace")) 
;-> #'user/current-track

(deref current-track)
;-> "Venus, the Bringer of Peace"

@current-track
;-> "Venus, the Bringer of Peace"
#+END_SRC
* 如何改变一个Atom的值？ #card #clojure
:PROPERTIES:
:card-last-interval: 4.14
:card-repeats: 2
:card-ease-factor: 2.7
:card-next-schedule: 2022-05-03T05:17:13.113Z
:card-last-reviewed: 2022-04-29T02:17:13.113Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
(reset! current-track "Credo")
;-> "Credo"

(swap! current-track assoc :title "Sancte Deus")
;-> {:title "Sancte Deus", :composer "Tallis"}
;如果有其他线程正在修改同一数据，swap！可能会重试，因此传给swap!的函数不能有副作用
#+END_SRC