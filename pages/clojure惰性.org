* 在惰性序列产生表达式的最外层使用lazy-seq宏
* 惰性序列的每一步的状态是什么？ #card #clojure
:PROPERTIES:
:card-last-interval: 43.56
:card-repeats: 4
:card-ease-factor: 3.3
:card-next-schedule: 2022-11-17T13:45:37.701Z
:card-last-reviewed: 2022-10-05T00:45:37.701Z
:card-last-score: 5
:END:
** 如果这一步还没有实现realized，则指向一个函数或者[[thunk]]，等待将来需要求值时调用
** 如果这一步已经实现realized，则指向被缓存的[[thunk]]的返回值，而thunk本身被释放掉了
* 使用iterate, filter, map, reduce等高阶函数，能够很好的处理无限长 [[Clojure惰性序列]]
* 惰性、尾递归、增量的快速排序
** #+BEGIN_SRC clojure

(defn rand-ints [n]
  (take n (repeatedly #(rand-int n))))

(defn sort-parts [work]
  (lazy-seq
   (loop [[part & parts] work]
     (if-let [[pivot & xs] (seq part)]
       (let [smaller? #(< % pivot)]
         (recur (list*
                 (filter smaller? xs) 
                 pivot
                 (remove smaller? xs) ; 如果只取排序结果的少数前面几项，很多remove操作实际上不会发生realized
                 parts)))
       (when-let [[x & parts] parts]
         (cons x (sort-parts parts)))))))


(defn qsort [xs]
  (sort-parts (list xs)))

(take 10 (qsort (rand-ints 10000)))
;=> (0 0 0 4 4 7 7 8 9 9)
#+END_SRC
* 注意[[Clojure REPL]]不是惰性的
** 可以通过设定print-length来在REPL中打印惰性序列
** #+BEGIN_SRC clojure
(set! *print-length* 10)
#+END_SRC