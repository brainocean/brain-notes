* Agent的适用场景是什么？ #card #clojure
:PROPERTIES:
:card-last-interval: 34.8
:card-repeats: 4
:card-ease-factor: 2.9
:card-next-schedule: 2022-06-19T19:59:21.187Z
:card-last-reviewed: 2022-05-16T00:59:21.187Z
:card-last-score: 5
:END:
** 对数据的异步访问
* 如何创建一个Agent并获取它的值？ #card #clojure
:PROPERTIES:
:card-last-interval: 34.8
:card-repeats: 4
:card-ease-factor: 2.9
:card-next-schedule: 2022-06-19T20:01:47.926Z
:card-last-reviewed: 2022-05-16T01:01:47.926Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
(def counter (agent 0))
;-> #'user/counter

(deref counter)
;-> 0

@counter
;-> 0
#+END_SRC
* 如何改变一个Agent的值？ #card #clojure
:PROPERTIES:
:card-last-interval: 34.8
:card-repeats: 4
:card-ease-factor: 2.9
:card-next-schedule: 2022-06-19T20:02:00.737Z
:card-last-reviewed: 2022-05-16T01:02:00.737Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
(send counter inc)
;-> #object[clojure.lang.Agent 0x7ae288e1 {:status :ready, :val 1}]
;send并不返回新的值，因为这个值现在可能还没有发生更改，send返回agent对象本身
#+END_SRC
* Agent如何处理出错？ #card #clojure
:PROPERTIES:
:card-last-interval: 84.1
:card-repeats: 5
:card-ease-factor: 2.76
:card-next-schedule: 2022-09-05T02:41:34.216Z
:card-last-reviewed: 2022-06-13T00:41:34.216Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
(agent initial-state options*)
; options include:
;   :validator validate-fn
;   :meta metadata-map
;   :error-handler handler-fn
;   :error-mode mode-keyword (:continue or :fail)

(agent-error counter)

(restart-agent counter 0)
;-> nil
#+END_SRC