* Agent的适用场景是什么？ #card #clojure
:PROPERTIES:
:card-last-interval: 681.79
:card-repeats: 6
:card-ease-factor: 3.1
:card-next-schedule: 2024-08-10T18:27:13.736Z
:card-last-reviewed: 2022-09-29T00:27:13.736Z
:card-last-score: 5
:END:
** 对数据的异步访问
* 如何创建一个Agent并获取它的值？ #card #clojure
:PROPERTIES:
:card-last-interval: 681.79
:card-repeats: 6
:card-ease-factor: 3.1
:card-next-schedule: 2024-08-10T18:29:09.161Z
:card-last-reviewed: 2022-09-29T00:29:09.161Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
(def counter (agent 0))
;-> #'user/counter

(deref counter)
;-> 0

@counter
;-> 0
#+END_SRC
* 如何改变一个Agent的值？ #card #clojure
:PROPERTIES:
:card-last-interval: 681.79
:card-repeats: 6
:card-ease-factor: 3.1
:card-next-schedule: 2024-08-10T18:29:26.642Z
:card-last-reviewed: 2022-09-29T00:29:26.642Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
(send counter inc)
;-> #object[clojure.lang.Agent 0x7ae288e1 {:status :ready, :val 1}]
;send并不返回新的值，因为这个值现在可能还没有发生更改，send返回agent对象本身
#+END_SRC
* Agent如何处理出错？ #card #clojure
:PROPERTIES:
:card-last-interval: 37.41
:card-repeats: 4
:card-ease-factor: 3.06
:card-next-schedule: 2022-10-31T17:06:57.938Z
:card-last-reviewed: 2022-09-24T08:06:57.939Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
(agent initial-state options*)
; options include:
;   :validator validate-fn
;   :meta metadata-map
;   :error-handler handler-fn
;   :error-mode mode-keyword (:continue or :fail)

(agent-error counter)

(restart-agent counter 0)
;-> nil
#+END_SRC