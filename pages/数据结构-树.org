* 树的边的数量和它的顶点数量是 {{cloze 同阶}}的 #card #DSA
:PROPERTIES:
:card-last-interval: 3.19
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-10-15T03:38:44.817Z
:card-last-reviewed: 2022-10-11T23:38:44.817Z
:card-last-score: 5
:title: 数据结构-树
:END:
** $$e = \sum_{r \in V} degree(r) = n - 1 = \Theta(n) $$
* 什么是有序树？ #card #DSA
:PROPERTIES:
:card-last-interval: 3.19
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-10-15T03:37:32.368Z
:card-last-reviewed: 2022-10-11T23:37:32.370Z
:card-last-score: 5
:END:
** 兄弟节点之间定义了次序的树
* 什么是真二叉树？ #card #DSA
:PROPERTIES:
:card-last-interval: 3.19
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-10-15T03:37:43.744Z
:card-last-reviewed: 2022-10-11T23:37:43.745Z
:card-last-score: 5
:END:
** 所有节点的出度为偶数(0或者2)的二叉树
** 真二叉树可以帮助简化算法的实现和理解
* 为什么二叉树可以描述多叉树？ #card #DSA
:PROPERTIES:
:card-last-interval: 3.19
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-10-15T03:37:55.449Z
:card-last-reviewed: 2022-10-11T23:37:55.449Z
:card-last-score: 5
:END:
** 使用firstChild-nextSibling(长子-兄弟)表示法的多叉树就是一个二叉树
* 使用迭代的方式来实现二叉树的遍历
** 使用栈(深度遍历)或者队列(广度遍历)来组织节点的顺序访问
** 通过长子链(左侧链)简化先序和中序遍历
* Huffman树
** 利用二叉树每个叶子节点的路径唯一的特性，可以确定一个编码
** 如果不考虑词频，平衡的真二叉树是效率最高的(编码长度最短)
** Huffman树引入词频的加权，找到效率最高的编码方式
*** 权重的计算
**** 叶子节点——词频
**** 分支节点——孩子节点的权重之和
*** 权重高的放在树的高处，权重低的放在树的低处
*** 从权重最低的叶子节点开始，从下向上逐渐构造合并成更大的树