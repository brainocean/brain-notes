* Reduce是最核心和基础的功能，map, filter等等都可以用reduce来完成
* Reduce使用一个reducing function(rf)做每一步的处理，reducing function的结构是什么？ #card #clojure
:PROPERTIES:
:card-last-interval: 4.14
:card-repeats: 2
:card-ease-factor: 2.7
:card-next-schedule: 2022-05-11T04:24:11.561Z
:card-last-reviewed: 2022-05-07T01:24:11.562Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
;; reducing function signature
;; whatever, input -> whatever

(defn rf
  ([] initial-value)
  ([accum] (finalize accum))
  ([accum elem] (combine accum elem)))

#+END_SRC
** 一个例子
#+BEGIN_SRC clojure
(defn rf
  ([] (transient []))
  ([v] (persistent! v))
  ([v x] (conj! v x)))

(defn map-core
  [f]
  (fn [rf]
    (fn [accumulator element]
      (rf accumulator (f element)))))

(defn -map
  ([f coll]
   (-map f (rf) coll))
  ([f acc coll]
   (rf (-reduce ((map-core f) rf) acc coll))))

(-map inc [1 2 3 4 5 6 7 8])
#+END_SRC
* What is a transducer? #card #clojure
:PROPERTIES:
:card-last-interval: 10.24
:card-repeats: 3
:card-ease-factor: 2.56
:card-next-schedule: 2022-05-20T06:32:27.991Z
:card-last-reviewed: 2022-05-10T01:32:27.991Z
:card-last-score: 5
:END:
** A transducer (sometimes referred to as xform or xf) is a transformation from one reducing function to another
** #+BEGIN_SRC clojure
;; reducing function signature
;; whatever, input -> whatever

;; transducer signature
;; (whatever, input -> whatever) -> (whatever, input -> whatever)

(transduce xform rf init coll)
;; xform is transducer which transforms rf(which is a reducing function) to another rf', 
;; then transduce call reduces coll with rf'
#+END_SRC
* Transduce操作的三个重要组成部分都是哪些？ #card #clojure
:PROPERTIES:
:card-last-interval: 9.28
:card-repeats: 3
:card-ease-factor: 2.32
:card-next-schedule: 2022-05-18T06:56:38.912Z
:card-last-reviewed: 2022-05-09T00:56:38.914Z
:card-last-score: 3
:END:
** iteration -- 这个是由reduce API(由reducible thing实现)来负责
** accumulation -- 这个是由最初的reducing function来负责
** transform/processing -- 这个是由transducer来负责
** 这三个部分是互相正交的
* 一个Transducer的代码结构是怎样的？ #card #clojure
:PROPERTIES:
:card-last-interval: 10.24
:card-repeats: 3
:card-ease-factor: 2.56
:card-next-schedule: 2022-05-20T06:29:31.493Z
:card-last-reviewed: 2022-05-10T01:29:31.494Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
(def a-transducer
  (fn [rf] ; taking a reducing function as argument
  ; return a new reducing function, which has
    (fn ([] ...) ; zero arity for initial value
        ([result] ...) ; one arity for completion
        ([result input] ...)))) ; 2 arity for step processing
#+END_SRC
* eduction的功能是什么？ #card #clojure
:PROPERTIES:
:card-last-interval: 4.14
:card-repeats: 2
:card-ease-factor: 2.7
:card-next-schedule: 2022-05-10T04:07:28.178Z
:card-last-reviewed: 2022-05-06T01:07:28.178Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
(eduction xform* coll)
;; eduction创建了一个xform应用在coll上面的promise，当后面的reduce发生的时候，会实际执行xform

(def iter (eduction xf (range 5)))
(reduce + 0 iter)
;; => 6
#+END_SRC
* into怎样使用transducer？ #card #clojure
:PROPERTIES:
:card-last-interval: 10.24
:card-repeats: 3
:card-ease-factor: 2.56
:card-next-schedule: 2022-05-20T06:31:39.662Z
:card-last-reviewed: 2022-05-10T01:31:39.663Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
(into to xf from)
;; Into just reduces with conj using from as the collection and to as the initial value.
;; 约等于 (transduce xf conj to from)
#+END_SRC
* sequence怎样使用transducer? #card #clojure
:PROPERTIES:
:card-last-interval: 9.28
:card-repeats: 3
:card-ease-factor: 2.32
:card-next-schedule: 2022-05-16T07:22:19.801Z
:card-last-reviewed: 2022-05-07T01:22:19.802Z
:card-last-score: 5
:END:
** #+BEGIN_SRC clojure
(sequence xform coll & colls)
;; Takes a transducer and a collection, 
;; returns a lazy sequence of the transducer applied to the elements.
;; can take multiple collections like 'map' function
#+END_SRC