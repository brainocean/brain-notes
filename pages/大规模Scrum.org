* 产品负责人 Product Owner
** 指南：优先级确定胜过澄清
*** PO的关键信息流
**** 1）以自适应的方式决定产品的发展方向，并将这一决定反映在产品待办事项列表优先级中；
**** 2）发现并澄清用户需求和条目的细节
*** 作为产品负责人，需要专注于努力思考^^产品方向和条目优先级顺序^^，
*** 而将细节发掘工作尽可能多地委托给团队
*** 需要鼓励并帮助团队与用户直接对话，充当^^连接者^^，而不是中间人的作用。
*** 产品负责人不应独自处理产品待办事项列表梳理工作，而应鼓励多个团队与客户/用户及其他利益相关者直接合作，并从中获得支持
** PO的核心责任
*** 方向和优先级——决定下一步的发展方向
*** 愿景、演进和采用技术——着眼于长远
*** 人际关系和政治——让每个人都快乐（足够地）
*** 判断和预测——评估市场和竞争对手
** 最好委托给团队的工作
*** 澄清——探索条目的详细含义
**** 委托给APO/TPO
*** 管理工作——报告和跟踪指标
**** 委托给Release team和task force leader
*** 跨部门协调——联系生产、销售等
**** PM
*** 了解市场、技术和竞争对手
**** 委托给PM
** 产品负责人不应承担以下任务
*** 管理依赖项
**** 交给APO，arch
*** 在团队之间做协调工作
**** 但是B1目前的状况，缺乏一个中间的有效协调人员和机制，只能由我暂时做这件事情
*** 预测和规划团队的工作
**** Line manager的工作？
*** 质疑估算数字
**** APO/TPO
*** 甚至，在人与人之间传递信息
**** 作为连接者，而不是中间人
* Backlog管理
** 一个完整的可交付产品对应一个产品负责人和一个产品待办事项列表。
*** 而不是每个团队有自己的backlog，因为这样会
**** 让团队看不到全局性真正重要的东西，而只关注在自己的局部优先级
**** 而且不同团队之间很难灵活快速的切换backlog item来进行快速响应
** 指南：不要“管理依赖关系”，而要最小化约束关系
*** 对于使用共享代码的特性团队，不存在^^内部依赖关系^^和依赖关系管理
**** 关键是共享代码，破除code base ownership的概念
*** 不要管理^^外部依赖关系^^，而要最小化约束关系
**** 将外部依赖重新描述为，在完成条目A时存在一个约束：接口更改
** 切分
*** 步骤
**** 让一个团队将巨大需求分成若干块（条目），
**** 然后从一个块中切分出更小的功能块（细小条目），细化并开始实现
**** [[../assets/image_1699411841892_0.png]]
*** 习惯性的思维方式是在实现之前需要“充分理解”需求。可具有讽刺意味的是，不去尽早实现，反而会阻碍充分的理解。
**** 这意味着dev团队和需求提供方（PM，security, etc.）需要紧密的、频繁的配合
**** 实际上是打破了PM和Dev之间的壁垒，让他们在agile的原则下工作
***** 如何看待commitment? define of ready?
** 父条目的处理
*** 删除父条目
**** 优点：简单、促进子条目的独立性
**** 缺点：丢失关联性，不利于集合在一个主题
*** 保留父条目
**** 优点：关联性、适用于Huge LeSS -- APO条目和CPO条目的关系
**** 避免多层、深层结构
**** 使用条目--祖先的结构，而不是祖先--条目，更关注子条目的独立性和优先级
** 进度
*** Sprint内跟踪 -- 不要跟踪，团队自组织
**** 在Scrum中，产品待办事项列表和Sprint待办事项列表是分开的，它们有着不同的目的。
***** 产品待办事项列表用于管理以客户为中心的条目
***** 而Sprint待办事项列表是用于团队在Sprint期间管理他们自己和他们的任务，不是为产品负责人或外部跟踪而设
***** 不要对产品待办事项列表和Sprint待办事项列表使用相同的工具
*** 跨Sprint跟踪（产品进度跟踪）
**** 当焦点放在完成条目上时，透明度和易跟踪性就会显著提高，在每个Sprint结束时，将条目标记为完成或未完成
** 巨型LeSS的backlog管理原则
*** 有一个产品待办事项列表；
*** 其中的每一个条目只属于一个[[需求领域]]
*** 每个[[需求领域]]有一个领域产品待办事项列表
**** 从概念上讲它是一个产品待办事项列表的更精细的视图。
*** 如果有新的巨大需求
**** 创建一个新的领域，加入APO和初始团队
**** 用探索的方式逐渐扩展团队规模
**** 直到扩展到4个团队，或者合并到另一个领域
* 完成的定义
** LeSS的完成的规则
*** 整个产品只有一个“完成”定义，所有团队通用。
*** 每个团队可以扩展通用的“完成”定义，以形成为自己团队所用的、更为严格的“完成”定义。
*** 完美的目标是通过改进“完成”的定义，在每个Sprint（或者更频繁地）产出可交付的产品。
* 产品待办事项列表梳理
** Product Backlog Refinement -- PBR
*** 产品待办事项列表梳理（PBR）是指团队利用^^研讨会^^的机会与^^用户和利益相关者^^^^澄清^^后续要做的条目，^^分解^^大条目，并（重新）^^估算^^条目。
** 规则
*** 产品待办事项列表梳理（PBR）是由每个团队针对将来可能执行的条目来进行的。要进行多团队或总体PBR工作，以提高团队成员对待办事项列表理解的一致性，并在条目密切相关或者需要更广泛的输入/学习时，发现并利用各种协调机会。
*** 产品负责人不应独自处理产品待办事项列表梳理工作；而应鼓励多个团队与客户/用户及其他利益相关者直接合作，并从中获得支持。
*** 所有优先级顺序都由产品负责人确定，但优先级的澄清工作应尽可能直接在团队、客户/用户和其他利益相关者之间进行。
** PBR的不同类型
*** [[../assets/image_1701398917852_0.png]]
** PBR的组合方式
*** [[../assets/image_1701398977571_0.png]]
* 完成的定义
** [[../assets/image_1705463731392_0.png]]